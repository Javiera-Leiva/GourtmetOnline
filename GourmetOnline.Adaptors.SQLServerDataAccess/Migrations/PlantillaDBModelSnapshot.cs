// <auto-generated />
using System;
using GourmetOnline.Adaptors.SQLServerDataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GourmetOnline.Adaptors.SQLServerDataAccess.Migrations
{
    [DbContext(typeof(PlantillaDB))]
    partial class PlantillaDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Administrador", b =>
                {
                    b.Property<Guid>("Id_Admin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo_Admin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre_Admin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("Id_Admin");

                    b.ToTable("tb_Administrador");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Bebida", b =>
                {
                    b.Property<Guid>("Id_Bebida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Menu")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MenuId_Menu")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Precio")
                        .HasColumnType("int");

                    b.HasKey("Id_Bebida");

                    b.HasIndex("MenuId_Menu");

                    b.ToTable("tb_Bebida");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Categoria", b =>
                {
                    b.Property<Guid>("Id_Categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlatoId_Plato")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_Categoria");

                    b.HasIndex("PlatoId_Plato");

                    b.ToTable("tb_Categoria");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id_Cliente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id_Menu")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Modo_Pago")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModoId_Modo_Pago")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("Id_Cliente");

                    b.HasIndex("ModoId_Modo_Pago");

                    b.ToTable("tb_Cliente");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Descripcion_Bebida", b =>
                {
                    b.Property<Guid>("Id_Tipo_Bebida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id_Bebida")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_Tipo_Bebida");

                    b.HasIndex("Id_Bebida");

                    b.ToTable("tb_Descripcion_Bebida");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Descripcion_Plato", b =>
                {
                    b.Property<Guid>("Id_Tipo_Plato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descrpcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id_Plato")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_Tipo_Plato");

                    b.HasIndex("Id_Plato");

                    b.ToTable("tb_Descripcion_plato");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Menu", b =>
                {
                    b.Property<Guid>("Id_Menu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_Menu");

                    b.ToTable("tb_Menu");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Modo_Pago", b =>
                {
                    b.Property<Guid>("Id_Modo_Pago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Factura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Modo_de_Pago")
                        .HasColumnType("bit");

                    b.HasKey("Id_Modo_Pago");

                    b.ToTable("tb_Modo_Pago");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Pedido", b =>
                {
                    b.Property<Guid>("Id_Pedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdministradorId_Admin")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Admin")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Cliente")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_Pedido");

                    b.HasIndex("AdministradorId_Admin");

                    b.ToTable("tb_Pedido");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Plato", b =>
                {
                    b.Property<Guid>("Id_Plato")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Menu")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Precio")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Plato");

                    b.ToTable("tb_Plato");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Bebida", b =>
                {
                    b.HasOne("GourmetOnline.Core.Domain.Models.Menu", "Menu")
                        .WithMany("Bebida")
                        .HasForeignKey("MenuId_Menu");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Categoria", b =>
                {
                    b.HasOne("GourmetOnline.Core.Domain.Models.Bebida", null)
                        .WithMany("Categoria")
                        .HasForeignKey("Id_Categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GourmetOnline.Core.Domain.Models.Plato", null)
                        .WithMany("Categoria")
                        .HasForeignKey("PlatoId_Plato");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Cliente", b =>
                {
                    b.HasOne("GourmetOnline.Core.Domain.Models.Menu", "Menu")
                        .WithMany("clientes")
                        .HasForeignKey("Id_Cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GourmetOnline.Core.Domain.Models.Modo_Pago", "Modo")
                        .WithMany("Clientes")
                        .HasForeignKey("ModoId_Modo_Pago");
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Descripcion_Bebida", b =>
                {
                    b.HasOne("GourmetOnline.Core.Domain.Models.Bebida", "Bebida")
                        .WithMany("Descripcion_Bebida")
                        .HasForeignKey("Id_Bebida")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Descripcion_Plato", b =>
                {
                    b.HasOne("GourmetOnline.Core.Domain.Models.Plato", "Plato")
                        .WithMany("Descripcion_Platos")
                        .HasForeignKey("Id_Plato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Pedido", b =>
                {
                    b.HasOne("GourmetOnline.Core.Domain.Models.Administrador", "Administrador")
                        .WithMany("Pedidos")
                        .HasForeignKey("AdministradorId_Admin");

                    b.HasOne("GourmetOnline.Core.Domain.Models.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("Id_Pedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GourmetOnline.Core.Domain.Models.Plato", b =>
                {
                    b.HasOne("GourmetOnline.Core.Domain.Models.Menu", "Menu")
                        .WithMany("Plato")
                        .HasForeignKey("Id_Plato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
